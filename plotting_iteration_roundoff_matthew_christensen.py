# -*- coding: utf-8 -*-
"""Plotting_iteration_roundoff-Matthew_Christensen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-fBMjR9gGf1JzXFkfhwjh6DLrw5rlqF3

#**Lab 3 - Plotting, iteration, and roundoff error**

Enter your code in the spaces provided. Do not change any of the variable names or function names that are already provided for you. In places where we specify the name of the return value, make sure that your code produces the a value with the correct name.
"""

# Do not edit this cell.

LabID="Lab3"

try:
  from graderHelp import ISGRADEPLOT
except ImportError:
  ISGRADEPLOT = True

"""**Enter your BYU NetID**"""

# Enter your first and last names in between the quotation marks.

first_name="Matthew"

last_name="Christensen"

# Enter your Math 215 section number in between the quotation marks. 

section_number="001"  

# Enter your BYU NetID in between the quotation marks.  NOT YOUR BYU ID NUMBER! 

BYUNetID="mrc621"

"""**Import NumPy and PyPlot**"""

import numpy as np
from matplotlib import pyplot as plt


# # We import matplotlib.pyplot, and refer to it in our code as plt.
# from matplotlib import pyplot as plt

# # Creates an array with 11 evenly spaced points between -5 and 5.
# x=np.linspace(-5,5,11)

# # Print out the array x.
# print("x = ",x)

# # Creates an array where each of the points in x are squared.
# y = x**2

# # Print out the array y.
# print("y = ",y)

# # To visualize the plot we do the following:

# plt.plot(y) # Create the line plot.
# plt.show() # Display the resulting plot.

# # Creates an array of 50 evenly spaced points between -5 and 5.
# x = np.linspace(-5,5,50)

# # Creates an array y which contains the squares of the values in x.
# y=x**2

# # We specify both x and y in plt.plot to ensure the correct domain.
# plt.plot(x,y)
# plt.show()

"""**Problem 1**"""

# Plot both functions from Problem 1 here.  Put all of your code to create the plot inside the function below.

def create_plots():
  
  t = np.linspace(-2*np.pi, 2*np.pi, 300)
  a = np.sin(t)
  b = np.cos(4*t)
  plt.plot(t, a)
  plt.plot(t, b)
  
  plt.show  
  
  return None

create_plots()

"""**Problem 2**"""

# Create the scatter plot from Problem 2 here.  Put all of your code to create the plot inside the function below.

def create_scatter_plot():
  
  # Get 500 random samples from two normal distributions.
  x = np.random.normal(scale=1.5, size=500)
  y = np.random.normal(scale=1,size=500)

  # Draw a scatter plot of x against y, using transparent circle markers.
  plt.plot(x, y,'x', markersize=5, alpha=1)
  plt.show()  
  
  return None

create_scatter_plot()

"""**Problem 3**"""

def fact(n):
  if n==0:
    return 1
  else:
    return n * fact(n-1)

"""**Problem 4**"""

def f(x):
  return x**2 + x - 5

def bisection(a,b,n):
  for i in range(n):
    d = (a+b)/2  
    
    if f(d) < 0:
      a = d
    else:
      b = d
  return d

root = round(bisection(0, 2, 200), 12) # Replace the value -1 with your approximation to the root of f(x), correct to 12 decimal places.

print(root)



"""**Problem 5**"""

def g(x):
  i = x**4 - 2*(x**3) - 17*(x**2) + 4*(x) + 30
  return i

def g_prime(x):
  i = 4*(x**3) - 6*(x**2) - 34*(x) + 4
  return i

print(g(7))
print(g_prime(-2))

"""**Problem 6**"""

def newtons_method(starting_guess,n):
  x_j = starting_guess
  
  for i in range(n):
    x_j = x_j - (g(x_j) / g_prime(x_j))
    
  return x_j

newtons_method(10,5)

"""**Problem 7**"""

def integration(m):
  e = 1 - np.exp(-1)
  for j in range(m):
    print(j + 1)
    e = 1 - (j + 1)*e
  return e

integration(3)

"""**STOP!  BEFORE YOU SUBMIT THIS LAB:**  Go to the "Runtime" menu at the top of this page, and select "Restart and run all".  If any of the cells produce error messages, you will either need to fix the error(s) or delete the code that is causing the error(s).  Then use "Restart and run all" again to see if there are any new errors.  Repeat this until no new error messages show up.

**You are not ready to submit until you are able to select "Restart and run all" without any new error messages showing up.  Your code will not be able to be graded if there are any error messages.**

To submit your lab for grading you must first download it to your compute as .py file.  In the "File" menu select "Download .py".  The resulting file can then be uploaded to https://linearalgebra.byu.edu for grading.
"""